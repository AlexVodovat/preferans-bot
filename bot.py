from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging
import os

API_TOKEN = os.getenv("BOT_TOKEN") or "—Å—é–¥–∞_–≤—Å—Ç–∞–≤—å_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(row_width=2)
main_menu.add(
    InlineKeyboardButton("üìò –ë–∞–∑–æ–≤—ã–π", callback_data="test_basic"),
    InlineKeyboardButton("üåÄ –†–æ—Å–ø–∞—Å—ã", callback_data="test_raspas"),
    InlineKeyboardButton("‚ô£ –í–∏—Å—Ç—ã", callback_data="test_vists"),
    InlineKeyboardButton("üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="test_advanced")
)

# –°–ª–æ–≤–∞—Ä—å —Ç–µ—Å—Ç–æ–≤
tests = {
    "test_basic": [
        {
            "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–∏–∫—É–ø?",
            "a": ["2 –∫–∞—Ä—Ç—ã, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Å–ª–µ —Å–¥–∞—á–∏", "–ü–µ—Ä–µ—Ä—ã–≤ –≤ –∏–≥—Ä–µ", "–ü—Ä–æ–∏–≥—Ä—ã—à"],
            "correct": 0,
            "explanation": "–ü—Ä–∏–∫—É–ø ‚Äî —ç—Ç–æ 2 –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Å–¥–∞—á–∏. –ò—Ö –±–µ—Ä—ë—Ç –∏–≥—Ä–æ–∫, –≤—ã–∏–≥—Ä–∞–≤—à–∏–π —Ç–æ—Ä–≥."
        },
        {
            "q": "–ö—Ç–æ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥?",
            "a": ["–ò–≥—Ä–æ–∫ —Å–ª–µ–≤–∞ –æ—Ç —Å–¥–∞—é—â–µ–≥–æ", "–ò–≥—Ä–æ–∫, —Å–¥–µ–ª–∞–≤—à–∏–π –∑–∞–∫–∞–∑", "–õ—é–±–æ–π –∏–≥—Ä–æ–∫ –ø–æ –∂–µ–ª–∞–Ω–∏—é"],
            "correct": 1,
            "explanation": "–ü–µ—Ä–≤—ã–º –≤—Å–µ–≥–¥–∞ —Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∏–≥—Ä–∞–ª —Ç–æ—Ä–≥ –∏ —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑."
        },
    ],
    "test_raspas": [
        {
            "q": "–ö–æ–≥–¥–∞ —á–∞—â–µ –≤—Å–µ–≥–æ –∏–≥—Ä–∞—é—Ç —Ä–∞—Å–ø–∞—Å—ã?",
            "a": ["–ö–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª –∑–∞–∫–∞–∑", "–ö–æ–≥–¥–∞ –µ—Å—Ç—å —Ç—É–∑ —á–µ—Ä–≤–µ–π", "–ö–æ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å –ø—É–ª—é"],
            "correct": 0,
            "explanation": "–†–∞—Å–ø–∞—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è, –µ—Å–ª–∏ –≤—Å–µ —Ç—Ä–æ–µ –ø–∞—Å—É—é—Ç ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –±–µ—Ä—ë—Ç –∑–∞–∫–∞–∑."
        },
        {
            "q": "–¶–µ–ª—å —Ä–∞—Å–ø–∞—Å–æ–≤?",
            "a": ["–ù–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –≤–∑—è—Ç–æ–∫", "–ò–∑–±–µ–∂–∞—Ç—å –≤–∑—è—Ç–æ–∫", "–í–∑—è—Ç—å —Ç—É–∑–∞ —Ç—Ä–µ—Ñ"],
            "correct": 1,
            "explanation": "–í —Ä–∞—Å–ø–∞—Å–∞—Ö –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª –º–µ–Ω—å—à–µ –≤–∑—è—Ç–æ–∫, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ ‚Äî –Ω–∏ –æ–¥–Ω–æ–π."
        },
    ],
    "test_vists": [
        {
            "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∏—Å—Ç?",
            "a": ["–ò–≥—Ä–∞ –≤—Ç–µ–º–Ω—É—é", "–ó–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞", "–ü–æ–¥–∞—á–∞ –∫–∞—Ä—Ç—ã —Å —Ä—É–∫–∏"],
            "correct": 1,
            "explanation": "–í–∏—Å—Ç ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑. –¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –Ω–µ –¥–∞—Ç—å –µ–º—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ."
        },
        {
            "q": "–°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –∑–∞ —É—Å–ø–µ—à–Ω—ã–π –≤–∏—Å—Ç –≤ –ø—É–ª—é?",
            "a": ["4", "2", "6"],
            "correct": 1,
            "explanation": "–£—Å–ø–µ—à–Ω—ã–π –≤–∏—Å—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç 2 –æ—á–∫–∞ –≤ –ø—É–ª—é. –ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–º–µ—à–∞–ª ‚Äî 2 —à—Ç—Ä–∞—Ñ–∞."
        },
    ],
    "test_advanced": [
        {
            "q": "–ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å –º–∏–∑–µ—Ä —Å —à–µ—Å—Ç—ë—Ä–∫–æ–π —á–µ—Ä–≤–µ–π –Ω–∞ —Ä—É–∫–µ?",
            "a": ["–î–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏", "–ù–µ—Ç, —ç—Ç–æ –ø–ª–æ—Ö–æ–π –ø–ª–∞–Ω", "–¢–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∏–∫—É–ø–µ"],
            "correct": 1,
            "explanation": "–®–µ—Å—Ç—ë—Ä–∫–∞ —á–µ—Ä–≤–µ–π ‚Äî –æ–ø–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –±–µ–∑ –∫–æ–∑—ã—Ä–µ–π. –ú–∏–∑–µ—Ä –ø–æ—á—Ç–∏ –æ–±—Ä–µ—á—ë–Ω –Ω–∞ –ø—Ä–æ–≤–∞–ª."
        },
        {
            "q": "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ä–∞—Å–ø–∞—Å?",
            "a": ["–ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–∏—Ö –∫–∞—Ä—Ç ‚Äî –ø–ª–æ—Ö–æ–π", "–ú–Ω–æ–≥–æ –∫–æ–∑—ã—Ä–µ–π ‚Äî —Ö–æ—Ä–æ—à–æ", "–°–¥–∞—á–∞ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"],
            "correct": 0,
            "explanation": "–•–æ—Ä–æ—à–∏–π —Ä–∞—Å–ø–∞—Å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –Ω–∞ —Ä—É–∫–∞—Ö –º–ª–∞–¥—à–∏–µ –∫–∞—Ä—Ç—ã. –ß–µ–º –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä—à–∏—Ö ‚Äî —Ç–µ–º –ª—É—á—à–µ."
        },
    ]
}

user_progress = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø—Ä–µ—Ñ–µ—Ä–∞–Ω—Å—É:", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith("test_"))
async def start_test(callback: types.CallbackQuery):
    test_id = callback.data
    user_id = callback.from_user.id
    user_progress[user_id] = {"test_id": test_id, "q": 0, "correct": 0}
    await callback.message.edit_text("üìã –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!")
    await send_question(callback.message, user_id)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(message, user_id):
    progress = user_progress[user_id]
    test_id = progress["test_id"]
    test = tests[test_id]
    idx = progress["q"]

    if idx >= len(test):
        result = f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {progress['correct']} –∏–∑ {len(test)} –≤–æ–ø—Ä–æ—Å–æ–≤."
        await message.answer(result, reply_markup=main_menu)
        return

    q = test[idx]
    keyboard = InlineKeyboardMarkup()
    for i, option in enumerate(q["a"]):
        callback_data = f"answer_{test_id}_{idx}_{i}"
        keyboard.add(InlineKeyboardButton(option, callback_data=callback_data))

    await message.answer(f"‚ùì {q['q']}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_", 3)
    if len(parts) != 4:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start")
        return

    _, test_id, q_idx, answer_idx = parts
    q_idx = int(q_idx)
    answer_idx = int(answer_idx)

    if user_id not in user_progress or user_progress[user_id]["test_id"] != test_id:
        user_progress[user_id] = {"test_id": test_id, "q": q_idx, "correct": 0}

    test = tests[test_id]
    question = test[q_idx]
    correct = question["correct"]

    explanation = question.get("explanation", "")
    if answer_idx == correct:
        user_progress[user_id]["correct"] += 1
        feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['a'][correct]}"

    if explanation:
        feedback += f"\n‚ÑπÔ∏è {explanation}"

    await callback.message.answer(feedback)
    user_progress[user_id]["q"] = q_idx + 1
    await send_question(callback.message, user_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
