from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging
import os

API_TOKEN = os.getenv("BOT_TOKEN") or "—Å—é–¥–∞_–≤—Å—Ç–∞–≤—å_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Å—Ç–∞
main_menu = InlineKeyboardMarkup(row_width=1)
main_menu.add(
    InlineKeyboardButton("üü® –¢–µ—Å—Ç –ø–æ —Ä–∞—Å–ø–∞—Å–∞–º", callback_data="test_raspas"),
    InlineKeyboardButton("üü¶ –¢–µ—Å—Ç –ø–æ –≤–∏—Å—Ç–∞–º", callback_data="test_vists"),
    InlineKeyboardButton("üü• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç", callback_data="test_advanced")
)

# –í–æ–ø—Ä–æ—Å—ã
tests = {
    "test_raspas": [
        {
            "q": "–ö–æ–≥–¥–∞ —á–∞—â–µ –≤—Å–µ–≥–æ –∏–≥—Ä–∞—é—Ç —Ä–∞—Å–ø–∞—Å—ã?",
            "a": ["–ö–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª –∑–∞–∫–∞–∑", "–ö–æ–≥–¥–∞ –µ—Å—Ç—å —Ç—É–∑ —á–µ—Ä–≤–µ–π", "–ö–æ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å –ø—É–ª—é"],
            "correct": 0
        },
        {
            "q": "–ö–∞–∫–∞—è —Ü–µ–ª—å –≤ —Ä–∞—Å–ø–∞—Å–∞—Ö?",
            "a": ["–ù–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –≤–∑—è—Ç–æ–∫", "–ò–∑–±–µ–∂–∞—Ç—å –≤–∑—è—Ç–æ–∫", "–í–∑—è—Ç—å —Ç—É–∑–∞ —Ç—Ä–µ—Ñ"],
            "correct": 1
        },
    ],
    "test_vists": [
        {
            "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∏—Å—Ç?",
            "a": ["–ò–≥—Ä–∞ –≤—Ç–µ–º–Ω—É—é", "–ó–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–∞—é—â–µ–≥–æ", "–ü–æ–¥–∞—á–∞ –∫–∞—Ä—Ç—ã —Å —Ä—É–∫–∏"],
            "correct": 1
        },
        {
            "q": "–°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –∑–∞ —É—Å–ø–µ—à–Ω—ã–π –≤–∏—Å—Ç –≤ –ø—É–ª—é?",
            "a": ["4", "2", "6"],
            "correct": 1
        },
    ],
    "test_advanced": [
        {
            "q": "–ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å –º–∏–∑–µ—Ä –ø—Ä–∏ —à–µ—Å—Ç—ë—Ä–∫–µ —á–µ—Ä–≤–µ–π –Ω–∞ —Ä—É–∫–µ?",
            "a": ["–î–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏", "–ù–µ—Ç, —ç—Ç–æ –ø–ª–æ—Ö–æ–π –ø–ª–∞–Ω", "–¢–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∏–∫—É–ø–µ"],
            "correct": 1
        },
        {
            "q": "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ä–∞—Å–ø–∞—Å –æ—Ç –ø–ª–æ—Ö–æ–≥–æ?",
            "a": ["–ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–∏—Ö –∫–∞—Ä—Ç ‚Äî –ø–ª–æ—Ö–æ–π", "–ú–Ω–æ–≥–æ –∫–æ–∑—ã—Ä–µ–π ‚Äî —Ö–æ—Ä–æ—à–æ", "–°–¥–∞—á–∞ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"],
            "correct": 0
        },
    ]
}

user_progress = {}

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø—Ä–µ—Ñ–µ—Ä–∞–Ω—Å—É:", reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data.startswith("test_"))
async def start_test(callback: types.CallbackQuery):
    test_id = callback.data
    user_id = callback.from_user.id
    user_progress[user_id] = {
        "test_id": test_id,
        "q": 0,
        "correct": 0
    }
    await callback.message.edit_text("üìã –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!\n")
    await send_question(callback.message, user_id)

async def send_question(message, user_id):
    progress = user_progress[user_id]
    test = tests[progress["test_id"]]
    idx = progress["q"]

    if idx >= len(test):
        result = f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {progress['correct']} –∏–∑ {len(test)} –≤–æ–ø—Ä–æ—Å–æ–≤."
        await message.answer(result, reply_markup=main_menu)
        return

    q = test[idx]
    keyboard = InlineKeyboardMarkup()
    for i, option in enumerate(q["a"]):
        keyboard.add(InlineKeyboardButton(option, callback_data=f"answer_{i}"))
    await message.answer(f"‚ùì {q['q']}", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    progress = user_progress.get(user_id)
    if not progress:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ /start")
        return

    answer_idx = int(callback.data.split("_")[1])
    current_question = tests[progress["test_id"]][progress["q"]]

    if answer_idx == current_question["correct"]:
        progress["correct"] += 1

    progress["q"] += 1
    await send_question(callback.message, user_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

