from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging
import os

API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî 2 –∫–æ–ª–æ–Ω–∫–∏
main_menu = InlineKeyboardMarkup(row_width=2)
main_menu.add(
    InlineKeyboardButton("üìò –ë–∞–∑–æ–≤—ã–π", callback_data="test_basic"),
    InlineKeyboardButton("üåÄ –†–æ—Å–ø–∞—Å—ã", callback_data="test_raspas"),
    InlineKeyboardButton("‚ô£ –í–∏—Å—Ç—ã", callback_data="test_vists"),
    InlineKeyboardButton("üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="test_advanced")
)

# –°–ª–æ–≤–∞—Ä—å —Ç–µ—Å—Ç–æ–≤
tests = {
    "test_basic": [
        {
            "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–∏–∫—É–ø?",
            "a": ["2 –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ —Å–¥–∞—á–∏", "–ü–µ—Ä–µ—Ä—ã–≤ –≤ –∏–≥—Ä–µ", "–û—Å–æ–±–∞—è —Å—Ç–∞–≤–∫–∞"],
            "correct": 0,
            "explanation": "–ü—Ä–∏–∫—É–ø ‚Äî –¥–≤–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Å–¥–∞—á–∏. –ò—Ö –±–µ—Ä—ë—Ç –∑–∞–∫–∞–∑—á–∏–∫."
        },
        {
            "q": "–ö—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º –ø–æ—Å–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏?",
            "a": ["–ò–≥—Ä–æ–∫ —Å–ª–µ–≤–∞ –æ—Ç —Å–¥–∞—é—â–µ–≥–æ", "–ò–≥—Ä–æ–∫, —Å–¥–µ–ª–∞–≤—à–∏–π –∑–∞–∫–∞–∑", "–í—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"],
            "correct": 1,
            "explanation": "–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑—á–∏–∫ ‚Äî –∏–≥—Ä–æ–∫, –≤—ã–∏–≥—Ä–∞–≤—à–∏–π —Ç–æ—Ä–≥."
        }
    ],
    "test_raspas": [
        {
            "q": "–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Å–æ–≤–∫–∞?",
            "a": ["–ï—Å–ª–∏ –≤—Å–µ –ø–∞—Å—É—é—Ç", "–ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–∑–µ—Ä", "–ï—Å–ª–∏ —Å–∏–ª—å–Ω—ã–π –∫–æ–∑—ã—Ä—å"],
            "correct": 0,
            "explanation": "–†–∞—Å–ø–∞—Å–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –±–µ—Ä—ë—Ç –∑–∞–∫–∞–∑."
        },
        {
            "q": "–¶–µ–ª—å —Ä–∞—Å–ø–∞—Å–∞?",
            "a": ["–í–∑—è—Ç—å –º–Ω–æ–≥–æ –≤–∑—è—Ç–æ–∫", "–ù–µ –≤–∑—è—Ç—å –Ω–∏ –æ–¥–Ω–æ–π", "–í–∑—è—Ç—å –≤—Å–µ –∫–æ–∑—ã—Ä–∏"],
            "correct": 1,
            "explanation": "–í —Ä–∞—Å–ø–∞—Å–æ–≤–∫–µ –Ω—É–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å –≤–∑—è—Ç–æ–∫ ‚Äî –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π."
        }
    ],
    "test_vists": [
        {
            "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∏—Å—Ç?",
            "a": ["–°—Ç–∞–≤–∫–∞ –ø—Ä–æ—Ç–∏–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞", "–ò–≥—Ä–∞ –≤—Å–ª–µ–ø—É—é", "–û—Å–æ–±—ã–π –ø—Ä–∏–∫—É–ø"],
            "correct": 0,
            "explanation": "–í–∏—Å—Ç ‚Äî —ç—Ç–æ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞, –≤–∑—è–≤—à–µ–≥–æ –ø—Ä–∏–∫—É–ø (–∑–∞–∫–∞–∑—á–∏–∫–∞)."
        },
        {
            "q": "–°–∫–æ–ª—å–∫–æ –≤–∏—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å?",
            "a": ["–î–æ –¥–≤—É—Ö", "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ", "–ù–æ–ª—å"],
            "correct": 0,
            "explanation": "–í–∏—Å—Ç–æ–≤–∞—Ç—å –º–æ–≥—É—Ç –¥–≤–æ–µ: —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞."
        }
    ],
    "test_advanced": [
        {
            "q": "–ú–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å –º–∏–∑–µ—Ä –ø—Ä–∏ —Ç—É–∑–µ —á–µ—Ä–≤–µ–π?",
            "a": ["–î–∞", "–ù–µ—Ç", "–¢–æ–ª—å–∫–æ –≤ —Ä–∞—Å–ø–∞—Å–µ"],
            "correct": 1,
            "explanation": "–ú–∏–∑–µ—Ä —Å —Å–∏–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π –Ω–∞ —Ä—É–∫–∞—Ö —Å–ª–∏—à–∫–æ–º —Ä–∏—Å–∫–æ–≤–∞–Ω."
        },
        {
            "q": "–ö–∞–∫ –ø–æ–Ω—è—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ä–∞—Å–ø–∞—Å?",
            "a": ["–ú–∞–ª–æ —Å—Ç–∞—Ä—à–∏—Ö –∫–∞—Ä—Ç", "–ú–Ω–æ–≥–æ –∫–æ–∑—ã—Ä–µ–π", "–ú–Ω–æ–≥–æ –≤–∑—è—Ç–æ–∫"],
            "correct": 0,
            "explanation": "–õ—É—á—à–∏–π —Ä–∞—Å–ø–∞—Å ‚Äî –∫–æ–≥–¥–∞ —É –≤–∞—Å —Å–ª–∞–±—ã–µ, –Ω–µ–≤–∑—è—Ç–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã."
        }
    ]
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
user_progress = {}

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:", reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data.startswith("test_"))
async def start_test(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    test_id = callback.data
    user_progress[user_id] = {"test_id": test_id, "q_idx": 0, "correct": 0}
    await callback.message.edit_text("üìã –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!")
    await send_question(callback.message, user_id)

async def send_question(message: types.Message, user_id: int):
    prog = user_progress.get(user_id)
    if not prog:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π /start")
        return

    test_id = prog["test_id"]
    q_idx = prog["q_idx"]
    test = tests[test_id]

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    if q_idx >= len(test):
        total = len(test)
        correct = prog["correct"]
        await message.answer(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {correct}/{total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö.", reply_markup=main_menu)
        return

    item = test[q_idx]
    kb = InlineKeyboardMarkup()
    for i, opt in enumerate(item["a"]):
        cb = f"answer|{test_id}|{q_idx}|{i}"
        kb.add(InlineKeyboardButton(opt, callback_data=cb))

    await message.answer(f"‚ùì {item['q']}", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("answer|"))
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("|")
    if len(parts) != 4:
        await callback.message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π /start")
        return

    _, test_id, q_idx, ans_idx = parts
    q_idx = int(q_idx); ans_idx = int(ans_idx)

    prog = user_progress.get(user_id)
    if not prog or prog["test_id"] != test_id:
        prog = {"test_id": test_id, "q_idx": q_idx, "correct": 0}
        user_progress[user_id] = prog

    question = tests[test_id][q_idx]
    correct = question["correct"]
    explanation = question.get("explanation", "")

    if ans_idx == correct:
        prog["correct"] += 1
        text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['a'][correct]}."

    if explanation:
        text += f"\n‚ÑπÔ∏è {explanation}"

    await callback.message.answer(text)
    prog["q_idx"] = q_idx + 1
    await send_question(callback.message, user_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
